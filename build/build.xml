<?xml version="1.0"?>
<project name="Arduino" default="build">
  <!--echo message="os.name = ${os.name}" /-->
  <!--echo message="os.arch = ${os.arch}" /-->
  <!--echo message="os.version = ${os.version}" /-->

  <!-- Sets properties for macosx/windows/linux depending on current system -->
  <condition property="platform" value="macosx">
    <and>
      <os family="mac" />
      <matches string="${os.version}" pattern="^10.[56]." />
    </and>
  </condition>
  <condition property="platform" value="macosx-java-latest"><os family="mac" /></condition>
  <condition property="platform" value="windows"><os family="windows" /></condition>
  <condition property="platform" value="linux32"><os family="unix" arch="i386" /></condition>
  <condition property="platform" value="linux64"><os family="unix" arch="amd64" /></condition>

  <condition property="macosx"><equals arg1="${platform}" arg2="macosx" /></condition>
  <condition property="macosx"><equals arg1="${platform}" arg2="macosx-java-latest" /></condition>
  <condition property="macosx-java-latest"><equals arg1="${platform}" arg2="macosx-java-latest" /></condition>
  <condition property="windows"><equals arg1="${platform}" arg2="windows" /></condition>
  <condition property="linux32"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="linux64"><equals arg1="${platform}" arg2="linux64" /></condition>
  <condition property="linux"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="linux"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="staging_folder" value="macosx"><equals arg1="${platform}" arg2="macosx-java-latest" /></condition>
  <condition property="staging_folder" value="macosx"><equals arg1="${platform}" arg2="macosx" /></condition>
  <condition property="staging_folder" value="windows"><equals arg1="${platform}" arg2="windows" /></condition>
  <condition property="staging_folder" value="linux"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="staging_folder" value="linux"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="staging_hardware_folder" value="Arduino.app/Contents/Java/hardware"><equals arg1="${platform}" arg2="macosx-java-latest" /></condition>
  <condition property="staging_hardware_folder" value="Arduino.app/Contents/Resources/Java/hardware"><equals arg1="${platform}" arg2="macosx" /></condition>
  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="windows" /></condition>
  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="linux32" /></condition>
  <condition property="staging_hardware_folder" value="hardware"><equals arg1="${platform}" arg2="linux64" /></condition>

  <condition property="arch-bits" value="32">
    <equals arg1="${platform}" arg2="linux32"/>
  </condition>
  <condition property="arch-bits" value="64">
    <equals arg1="${platform}" arg2="linux64"/>
  </condition>

  <condition property="launch4j-download-unpack-target-name" value="launch4j-windows"><os family="windows" /></condition>
  <property name="launch4j-download-unpack-target-name" value="launch4j-linux"/>

  <property name="MACOSX_BUNDLED_JVM" value="${java.home}/../"/>
  <property name="WINDOWS_BUNDLED_JVM" value="${java.home}"/>

  <!-- Libraries required for running arduino -->
  <fileset dir=".." id="runtime.jars">
    <include name="arduino-core/arduino-core.jar" />
    <include name="app/pde.jar" />
    <include name="app/lib/commons-codec-1.7.jar" />
    <include name="app/lib/commons-exec-1.1.jar" />
    <include name="app/lib/commons-httpclient-3.1.jar" />
    <include name="app/lib/commons-logging-1.0.4.jar" />
    <include name="app/lib/ecj.jar" />
    <include name="app/lib/jmdns-3.4.1.jar" />
    <include name="app/lib/jna.jar" />
    <include name="app/lib/jsch-0.1.50.jar" />
    <include name="app/lib/jssc-2.8.0.jar" />
    <include name="app/lib/ant.jar" />
    <include name="app/lib/ant-launcher.jar" />
  </fileset>

  <target name="build" description="Build Arduino.">
    <antcall target="${platform}-build" />
  </target>

  <target name="run" description="Run Arduino.">
    <antcall target="${platform}-run" />
  </target>

  <target name="dist" depends="revision-check"
	  description="Build Arduino for distribution.">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />
    <antcall target="${platform}-dist" />
  </target>

  <!-- "ยง$ยง$&, ant doesn't have a built-in help target :(  -->
  <target name="help" description="Show project help">
    <java classname="org.apache.tools.ant.Main">
      <arg value="-p" />
    </java>
  </target>

  <target name="test" depends="subprojects-test"/>

  <!-- - - - - - - - - - - - - - - - - - -->
  <!-- Subprojects: Core, App, Libraries -->
  <!-- - - - - - - - - - - - - - - - - - -->

  <target name="subprojects-clean">
    <subant buildpath="../arduino-core" target="clean"/>
    <subant buildpath="../app" target="clean"/>
  </target>

  <target name="subprojects-build">
    <subant buildpath="../arduino-core" target="build"/>
    <subant buildpath="../app" target="build"/>
  </target>

  <target name="subprojects-test">
    <subant buildpath="../app" target="test"/>
  </target>

  <!-- - - - - - - - - -->
  <!-- Basic Assembly  -->
  <!-- - - - - - - - - -->

  <target name="assemble">
    <fail unless="target.path"
	  message="Do not call assemble from the command line." />

    <!-- copy shared tools folder -->
    <copy todir="${target.path}/tools">
      <fileset dir="shared/tools" />
    </copy>

    <!-- copy library folder -->
    <copy todir="${target.path}/libraries">
      <fileset dir="../libraries" />
    </copy>

    <!-- copy hardware folder -->
    <copy todir="${target.path}/hardware">
      <fileset dir="../hardware">
        <exclude name="arduino/sam/system/CMSIS/Device/ATMEL/*/svd/"/>
        <exclude name="arduino/sam/system/CMSIS/Device/ATMEL/*/html/"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/ARM/*M0*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/ARM/*M4*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/GCC/*M0*"/>
        <exclude name="arduino/sam/system/CMSIS/CMSIS/Lib/GCC/*M4*"/>
      </fileset>
    </copy>


    <!-- copy shared examples folder -->
    <copy todir="${target.path}/examples">
      <fileset dir="shared/examples" />
    </copy>

    <!-- Unzip documentation -->
    <antcall target="unzip">
      <param name="archive_file" value="shared/reference-1.6.0.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/reference-1.6.0.zip" />
      <param name="final_folder" value="${target.path}/reference" />
      <param name="dest_folder" value="${target.path}" />
    </antcall>

    <!-- Write the revision file! -->
    <echo file="${target.path}/lib/version.txt" message="${version}" />
  </target>


  <!-- - - - - - - - - -->
  <!-- Revision check  -->
  <!-- - - - - - - - - -->
  <target name="revision-check">
    <!-- figure out the revision number -->
    <loadfile srcfile="shared/revisions.txt" property="revision">
      <filterchain>
        <ignoreblank />
        <headfilter lines="1"/>
        <tokenfilter>
          <linetokenizer includeDelims="false" />
          <!-- grab the thing from the first line that's 4 digits -->
          <containsregex pattern="ARDUINO ([^ ]*)" />
          <replaceregex pattern="ARDUINO ([^ ]*).*" replace="\1" />
        </tokenfilter>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="Latest revision detected in shared/revision.txt is: ${revision}" />

    <!-- figure out the revision number in base.java -->
    <loadfile srcfile="../arduino-core/src/processing/app/BaseNoGui.java"
	      property="revision.base">
      <filterchain>
        <tokenfilter>
          <linetokenizer />
          <containsregex pattern="String VERSION_NAME = "/>
          <replaceregex pattern=".*&quot;(.*)&quot;.*" flags="g" replace="\1"/>
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo message="                     Revision in BaseNoGui.java is: ${revision.base}" />
  </target>

  <!-- - - - - - - - -->
  <!-- Mac OS X      -->
  <!-- - - - - - - - -->

  <target name="macosx-java-latest-clean" depends="macosx-clean" description="Clean Mac OS X build"/>

  <target name="macosx-clean" depends="subprojects-clean" description="Clean Mac OS X build">
    <delete dir="macosx/work" />
    <delete dir="macosx/working_dir" />
    <delete dir="macosx/working.dmg" />
    <delete file="macosx/arduino-*.dmg" />
    <delete>
      <fileset dir="macosx" includes="arduino-*macosx*.zip"/>
    </delete>
  </target>

  <target name="macosx-checkos" unless="macosx">
    <echo>
      =======================================================
      Arduino for Mac OS X can only be built on Mac OS X.

      Bye.
      =======================================================
    </echo>
    <fail message="wrong platform (${os.name})" />
  </target>

  <target name="macosx-build" if="macosx" depends="revision-check, macosx-checkos, subprojects-build" description="Build Mac OS X version">
    <mkdir dir="macosx/work" />

    <!-- assemble the pde -->
    <copy todir="macosx/work/Arduino.app">
      <fileset dir="macosx/template.app" includes="**"/>
    </copy>

    <chmod file="macosx/work/Arduino.app/Contents/MacOS/JavaApplicationStub" perm="755" />

    <copy todir="macosx/work/Arduino.app/Contents/Resources/Java" flatten="true">
      <fileset refid="runtime.jars"/>
    </copy>

    <copy todir="macosx/work/Arduino.app/Contents/Resources/Java">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <antcall target="macosx-build-common"/>

    <replace file="macosx/work/Arduino.app/Contents/Info.plist"
             token="VERSION" value="${version}" />
    <replace file="macosx/work/Arduino.app/Contents/Info.plist"
             token="REVISION" value="${revision}" />

  </target>

  <target name="macosx-java-latest-build" if="macosx" depends="revision-check, macosx-checkos, subprojects-build" description="Build Mac OS X version">
    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/appbundler-1.0ea-arduino2.jar.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/appbundler-1.0ea-arduino2.jar.zip" />
      <param name="final_folder" value="${staging_folder}/appbundler-1.0ea-arduino2" />
      <param name="dest_folder" value="${staging_folder}/appbundler-1.0ea-arduino2" />
    </antcall>

    <mkdir dir="${staging_folder}/work" />

    <taskdef name="bundleapp" classname="com.oracle.appbundler.AppBundlerTask" classpath="${staging_folder}/appbundler-1.0ea-arduino2/appbundler-1.0ea-arduino2.jar"/>

    <bundleapp
            jvmRequired="1.7"
            outputdirectory="${staging_folder}/work"
            name="Arduino"
            displayname="Arduino"
            executablename="Arduino"
            identifier="cc.arduino.Arduino"
            shortversion="${version}"
            version="${revision}"
            signature="Pde1"
            icon="macosx/template.app/Contents/Resources/processing.icns"
            mainclassname="processing.app.Base"
            copyright="Arduino LLC"
            minimumsystemversion="10.7"
            highresolutioncapable="true">

      <arch name="x86_64"/>
      <arch name="i386"/>

      <classpath refid="runtime.jars"/>

      <option value="-Dapple.awt.application.name=Arduino" />
      <option value="-Dapple.laf.useScreenMenuBar=true"/>
      <option value="-Dcom.apple.macos.use-file-dialog-packages=true"/>
      <option value="-Dcom.apple.smallTabs=true"/>
      <option value="-Dcom.apple.macos.useScreenMenuBar=true" />

      <!--
      <option value="-Dapple.awt.showGrowBox=false"/>
      <option value="-Dapple.awt.Antialiasing=false"/>
      <option value="-Dapple.awt.TextAntialiasing=true"/>
      <option value="-Dcom.apple.hwaccel=true"/>
      <option value="-Dapple.awt.graphics.UseQuartz=true"/>
      -->

      <!--<option value="-Dcom.apple.macos.useScreenMenuBar=true"/>-->

      <!-- Workaround since the icon parameter for bundleapp doesn't work -->
      <option value="-Xdock:name=Arduino"/>
      <option value="-Dcom.apple.mrj.application.apple.menu.about.name=Arduino"/>
      <option value="-Dfile.encoding=UTF-8"/>

      <option value="-Xms128M"/>
      <option value="-Xmx1024M"/>

      <bundledocument extensions="ino,c,cpp,h"
                      icon="macosx/template.app/Contents/Resources/pde.icns"
                      name="Arduino Source File"
                      role="Editor">
      </bundledocument>

    </bundleapp>

    <copy todir="${staging_folder}/work/${staging_hardware_folder}/../">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <antcall target="macosx-build-common"/>

  </target>

  <target name="macosx-build-common">

    <!-- Unzip AVR tools -->
    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/avr-toolchain-mac32-3.4.5.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/avr-toolchain-mac32-3.4.5.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
    </antcall>

    <copy todir="macosx/work/${staging_hardware_folder}/tools/">
      <fileset file="macosx/dist/bossac" />
    </copy>

    <chmod file="macosx/work/${staging_hardware_folder}/tools/bossac" perm="+x" />

    <antcall target="assemble">
      <param name="target.path" value="macosx/work/${staging_hardware_folder}/../" />
    </antcall>

    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/gcc-arm-none-eabi-4.8.3-2014q1-mac.tar.gz" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/gcc-arm-none-eabi-4.8.3-2014q1-mac.tar.gz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/gcc-arm-none-eabi-4.8.3-2014q1" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/" />
    </antcall>

    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="macosx/work/${staging_hardware_folder}/tools" includes="**/3.4.6/**/*"/>
      <fileset dir="macosx/work/${staging_hardware_folder}/tools" includes="**/3.4.6"/>
      <fileset dir="macosx/work/${staging_hardware_folder}/tools" includes="**/man/**/*"/>
      <fileset dir="macosx/work/${staging_hardware_folder}/tools" includes="**/man"/>
    </delete>

    <antcall target="unzip">
      <param name="archive_file" value="./libastylej-2.05.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/libastylej-2.05.zip" />
      <param name="final_folder" value="${staging_folder}/libastylej" />
      <param name="dest_folder" value="${staging_folder}" />
    </antcall>
    <copy file="macosx/libastylej/libastylej.jnilib" todir="macosx/work/${staging_hardware_folder}/../lib/" />
    <chmod perm="755" file="macosx/work/${staging_hardware_folder}/../lib/libastylej.jnilib" />
    <copy file="macosx/libastylej/libastylej.jnilib" tofile="macosx/work/${staging_hardware_folder}/../lib/libastylej.dylib" />
    <chmod perm="755" file="macosx/work/${staging_hardware_folder}/../lib/libastylej.dylib" />

    <chmod perm="+x">
      <fileset dir="macosx/work/${staging_hardware_folder}/tools/avr/bin" includes="**/*" />
      <fileset dir="macosx/work/${staging_hardware_folder}/tools/avr/avr/bin" includes="**/*" />
      <fileset dir="macosx/work/${staging_hardware_folder}/tools/avr/libexec/gcc/avr/4.8.1/" includes="*" />
    </chmod>

    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/osx-xtensa-lx106-elf.tgz" />
      <param name="archive_url" value="http://download.igrr.me/osx-xtensa-lx106-elf.tgz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/xtensa-lx106-elf" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>

    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/esptool-0.4.2-osx.zip" />
      <param name="archive_url" value="https://github.com/igrr/esptool-ck/releases/download/0.4.2/esptool-0.4.2-osx.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-osx" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>
    <move file="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-osx/esptool" tofile="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool" />
    <delete dir="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-osx/" />

  </target>

  <target name="macosx-run" depends="macosx-build" description="Run Mac OS X version">
    <antcall target="macosx-run-common"/>
  </target>

  <target name="macosx-java-latest-run" depends="macosx-java-latest-build" description="Run Mac OS X version">
    <antcall target="macosx-run-common"/>
  </target>

  <target name="macosx-debug" depends="macosx-build" description="Run Mac OS X version">
    <antcall target="macosx-debug-common"/>
  </target>

  <target name="macosx-java-latest-debug" depends="macosx-java-latest-build" description="Run Mac OS X version">
    <antcall target="macosx-debug-common"/>
  </target>

  <target name="macosx-run-common">
    <exec executable="open" dir="macosx/work">
      <arg value="Arduino.app"/>
    </exec>
  </target>

  <target name="macosx-debug-common">
    <exec executable="open" dir="macosx/work" spawn="false">
      <arg value="Arduino.app"/>
    </exec>
  </target>

  <!-- - - - - - - - - - - - - - - - -->
  <!-- Sign application for MacOSX.  -->
  <!-- - - - - - - - - - - - - - - - -->
  <target name="macosx-signed-dist" if="macosx" depends="macosx-singed-dist-check, dist"
    description="Create a downloadable and signed .zip for the Mac OS X version">
    <fail unless="version" message="Please set the property 'version' to correctly sign distribution file" />

    <!-- Remove everything from working folder -->
    <delete dir="macosx/work/Arduino.app" />

    <!-- Unzip unsigned app into working dir -->
    <exec executable="unzip" dir="macosx/work">
      <arg line="../arduino-${version}-${platform}.zip" />
    </exec>

    <!-- Unlock keychain file -->
    <exec executable="security" dir="macosx/work">
      <arg line="unlock-keychain -p &quot;${macosx-sign-keychain-pass}&quot; &quot;${macosx-sign-keychain}&quot;" />
    </exec>

    <!-- Sign app -->
    <exec executable="codesign" dir="macosx/work">
      <arg line="--keychain &quot;${macosx-sign-keychain}&quot; --force -s &quot;${macosx-sign-id}&quot; -v Arduino.app/" />
    </exec>

    <!-- Check for successful signing -->
    <exec executable="codesign" dir="macosx/work" failonerror="true">
      <arg line="-vvvv Arduino.app/" />
    </exec>

    <delete file="macosx/arduino-${version}-${platform}.zip" />

    <!-- Create signed zip file -->
    <exec executable="zip" dir="macosx/work">
      <arg line="-q -r ../arduino-${version}-${platform}-signed.zip ." />
    </exec>

    <echo>
      =======================================================
      Arduino for Mac OS X built and signed.

      macosx/arduino-${version}-${platform}-signed.zip
      =======================================================
    </echo>
  </target>

  <target name="macosx-singed-dist-check">
    <fail unless="macosx-sign-keychain" message="Please set the property 'macosx-sign-keychain' to the correct keychain file" />
    <fail unless="macosx-sign-keychain-pass" message="Please set the property 'macosx-sign-keychain-pass' with the password to unlock the keychain" />
    <fail unless="macosx-sign-id" message="Please set the property 'macosx-sign-id' to the correct cert identifier" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - -->
  <!-- Build distribution file for MacOSX. -->
  <!-- - - - - - - - - - - - - - - - - - - -->
  <target name="macosx-dist" if="macosx" depends="macosx-build" description="Create a downloadable .zip for the Mac OS X version">
    <antcall target="macosx-dist-common"/>
  </target>

  <target name="macosx-java-latest-dist" if="macosx" depends="macosx-java-latest-build" description="Create a downloadable .zip for the Mac OS X version">
    <antcall target="macosx-dist-common"/>
  </target>

  <target name="macosx-dist-common">
    <exec executable="zip" dir="macosx/work">
      <arg line="-q -r ../arduino-${version}-${platform}.zip ." />
    </exec>

    <echo>
      =======================================================
      Arduino for Mac OS X was built. Grab the image from

      macosx/arduino-${version}-${platform}.zip
      =======================================================
    </echo>
  </target>

  <target name="macosx-dist-old" if="macosx" depends="macosx-build" description="Create a .dmg of the Mac OS X version">
    <!-- now build the dmg -->
    <gunzip src="macosx/template.dmg.gz" dest="macosx/working.dmg" />

    <mkdir dir="macosx/working_dir" />
    <exec executable="hdiutil">
      <arg line="attach macosx/working.dmg -noautoopen -mountpoint macosx/working_dir" />
      <!--<arg line="attach macosx/working.dmg -noautoopen -quiet -mountpoint macosx/working_dir" />-->
    </exec>

    <copy todir="macosx/working_dir">
      <fileset dir="macosx/work" />
    </copy>

    <!-- The ant copy command does not preserve permissions. -->
    <chmod file="macosx/working_dir/Arduino.app/Contents/MacOS/JavaApplicationStub" perm="+x" />
    <chmod perm="+x">
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin" includes="**/*" />
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/avr/bin" includes="**/*" />
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/avr-3/bin" includes="**/*" />
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/avr-4/bin" includes="**/*" />
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/libexec/gcc/avr/3.4.6/" includes="**/cc1*" />
      <fileset dir="macosx/working_dir/Arduino.app/Contents/Resources/Java/hardware/tools/avr/libexec/gcc/avr/4.3.2/" includes="**/cc1*" />
    </chmod>

    <!-- Pause briefly for the OS to catch up with the DMG changes. 
	 This prevents "hdiutil: couldn't eject "disk3" - Resource busy"
	 errors when ejecting the disk in the next step.
         You may need to set this value higher for your system. -->
    <sleep seconds="3" />

    <exec executable="hdiutil">
      <!--<arg line="detach macosx/working_dir -quiet -force" />-->
      <arg line="detach macosx/working_dir" />
    </exec>

    <delete file="macosx/arduino-*.dmg" />
    <exec executable="hdiutil">
      <arg line="convert macosx/working.dmg -quiet -format UDZO -imagekey zlib-level=9 -o macosx/arduino-${version}.dmg" />
    </exec>

    <!-- Clean up the interim files. -->
    <delete file="macosx/working.dmg" />
    <delete dir="macosx/working_dir" />

    <echo>
      =======================================================
      Arduino for Mac OS X was built. Grab the image from

      macosx/arduino-${version}.dmg
      =======================================================
    </echo>
  </target>

  <!-- - - - - - - - -->
  <!-- Linux         -->
  <!-- - - - - - - - -->

  <target name="linux-clean" depends="subprojects-clean" description="Clean linux version">
    <delete dir="linux/work" />
    <delete>
      <fileset dir="linux" includes="arduino-*linux*.tar.xz"/>
    </delete>
  </target>

  <target name="linux-checkos" unless="linux">
    <echo>
      =======================================================
      Arduino for Linux can only be built on on unix systems.

      Bye.
      =======================================================
    </echo>

    <fail message="wrong platform (${os.name})" />
  </target>

  <target name="linux-build" depends="revision-check, linux-checkos, subprojects-build" description="Build linux version">
    <mkdir dir="linux/work" />

    <copy todir="linux/work">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <copy todir="linux/work">
      <fileset dir="linux/dist" includes="lib/**" />
    </copy>

    <copy todir="linux/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>

    <antcall target="assemble">
      <param name="target.path" value="linux/work" />
    </antcall>

    <copy todir="linux/work" file="linux/dist/arduino" />
    <chmod perm="755" file="linux/work/arduino" />

    <mkdir dir="linux/work/hardware/tools" />
    <copy file="linux/dist/tools/adk2install" todir="linux/work/hardware/tools" />
    <copy file="linux/dist/tools/adk2tool" todir="linux/work/hardware/tools" />
    <copy file="linux/dist/tools/bossac${arch-bits}" tofile="linux/work/hardware/tools/bossac" />

    <chmod perm="755" file="linux/work/hardware/tools/bossac" />
    <chmod perm="755" file="linux/work/hardware/tools/adk2tool" />
    <chmod perm="755" file="linux/work/hardware/tools/adk2install" />

    <copy todir="linux/work" file="linux/dist/arduino" />
    <chmod perm="755" file="linux/work/arduino" />

    <antcall target="unzip">
      <param name="archive_file" value="./libastylej-2.05.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/libastylej-2.05.zip" />
      <param name="final_folder" value="${staging_folder}/libastylej" />
      <param name="dest_folder" value="${staging_folder}" />
    </antcall>
    <copy file="linux/libastylej/libastylej${arch-bits}.so" tofile="linux/work/lib/libastylej.so" />
    <chmod perm="755" file="linux/work/lib/libastylej.so" />
  </target>

  <target name="linux32-build" depends="linux-build" description="Build linux (32-bit) version">
    <!-- Unzip ARM tools -->
    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/gcc-arm-none-eabi-4.8.3-2014q1-linux32.tar.gz" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/gcc-arm-none-eabi-4.8.3-2014q1-linux32.tar.gz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/gcc-arm-none-eabi-4.8.3-2014q1" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/" />
    </antcall>

    <!-- Unzip AVR tools -->
    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/avr-toolchain-linux32-3.4.5.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/avr-toolchain-linux32-3.4.5.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
    </antcall>
  </target>

  <target name="linux64-build" depends="linux-build" description="Build linux (64-bit) version">
    <!-- Unzip ARM tools -->
    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/gcc-arm-none-eabi-4.8.3-2014q1-linux64.tar.gz" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/gcc-arm-none-eabi-4.8.3-2014q1-linux64.tar.gz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/gcc-arm-none-eabi-4.8.3-2014q1" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/" />
    </antcall>

    <!-- Unzip AVR tools -->
    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/avr-toolchain-linux64-3.4.5.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/avr-toolchain-linux64-3.4.5.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
    </antcall>

    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/linux64-xtensa-lx106-elf.tgz" />
      <param name="archive_url" value="http://download.igrr.me/linux64-xtensa-lx106-elf.tgz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/xtensa-lx106-elf" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>

    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/esptool-0.4.2-linux64.zip" />
      <param name="archive_url" value="https://github.com/igrr/esptool-ck/releases/download/0.4.2/esptool-0.4.2-linux64.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-linux64" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>
    <move file="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-linux64/esptool" tofile="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool" />
    <delete dir="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-linux64/" />

  </target>

  <target name="linux32-run" depends="linux32-build" description="Run Linux (32-bit) version">
    <exec executable="./linux/work/arduino" spawn="false"/>
  </target>

  <target name="linux64-run" depends="linux64-build" description="Run Linux (64-bit) version">
    <exec executable="./linux/work/arduino" spawn="false"/>
  </target>

  <!-- Set '${dist_file}_available' property if toolchain dist_file is downloaded              -->
  <!-- Set '${dist_file}_installed' property if toolchain is installed in working directory    -->
  <!--                              hardware/tools/${dist_check_file} is checked for existence -->
  <target name="untar-unzip-check">
    <available file="${archive_file}" property="${archive_file}_available" />
    <available file="${final_folder}" property="${archive_file}_installed" />
  </target>

  <!-- Retrieve tool -->
  <target name="untar-unzip-download" depends="untar-unzip-check" unless="${archive_file}_available">
    <get src="${archive_url}" dest="${archive_file}" verbose="true" ignoreerrors="true" />
  </target>

  <target name="untar-unzip-checksum" depends="untar-unzip-download">
    <echo>Testing checksum of "${archive_file}"</echo>
    <checksum file="${archive_file}" algorithm="sha" fileext=".sha" verifyproperty="checksum.matches"/>
    <condition property="checksum.matches.fail">
      <equals arg1="${checksum.matches}" arg2="false"/>
    </condition>
    <fail if="checksum.matches.fail">Checksum failed.

      File ${archive_file} failed checksum.
      Please remove "${archive_file}" to download it again.
    </fail>
  </target>

  <!-- Ensure that the tool is downloaded and test checksums, if everything's ok unzip it on the tools folder  -->
  <target name="untar" depends="untar-unzip-checksum" unless="${archive_file}_installed">
    <echo>Unzipping into folder ${dest_folder}</echo>
    <exec executable="tar">
      <arg value="xf"/>
      <arg value="${archive_file}"/>
      <arg value="--directory=${dest_folder}"/>
    </exec>
  </target>

  <target name="unzip" depends="untar-unzip-checksum" unless="${archive_file}_installed">
    <echo>Unzipping into folder ${dest_folder}</echo>
    <mkdir dir="${dest_folder}" />
    <exec executable="unzip">
      <arg value="-q" />
      <arg value="-n" />
      <arg value="-d" />
      <arg value="${dest_folder}" />
      <arg value="${archive_file}" />
    </exec>
  </target>

  <target name="linux-dist" depends="build"
	  description="Build .tar.xz of linux version">

    <move file="linux/work" tofile="linux/arduino-${version}" />

    <exec executable="tar" dir="linux">
      <arg value="--lzma"/>
      <arg value="-c"/>
      <arg value="-f"/>
      <arg value="arduino-${version}-${platform}.tar.xz"/>
      <arg value="arduino-${version}"/>
    </exec>

    <move file="linux/arduino-${version}" tofile="linux/work" />

    <echo>
      =======================================================
      Arduino for Linux was built. Grab the archive from

      linux/arduino-${version}-${platform}.tar.xz
      =======================================================
    </echo>
  </target>

  <target name="linux32-dist" depends="linux-dist"
	  description="Build .tar.xz of linux version" />

  <target name="linux64-dist" depends="linux-dist"
	  description="Build .tar.xz of linux version" />

  <!-- - - - - - - - -->
  <!-- Windows       -->
  <!-- - - - - - - - -->

  <target name="windows-clean" depends="subprojects-clean"
	  description="Clean windows version">
    <delete dir="windows/work" />
    <delete>
      <fileset dir="windows" includes="arduino-*windows*.zip"/>
    </delete>
  </target>

  <target name="windows-checkos" unless="windows">
    <echo>
      =======================================================
      Arduino for Windows can only be built on windows.

      Bye.
      =======================================================
    </echo>

    <fail message="wrong platform (${os.name})" />
  </target>

  <target name="download-launch4j-windows">
    <get src="http://switch.dl.sourceforge.net/project/launch4j/launch4j-3/3.0.2/launch4j-3.0.2-win32.zip" dest="windows" usetimestamp="true" skipexisting="true" verbose="true" />
    <unzip dest="windows/launcher/" src="windows/launch4j-3.0.2-win32.zip" overwrite="true"/>
  </target>

  <target name="download-launch4j-linux">
    <get src="http://switch.dl.sourceforge.net/project/launch4j/launch4j-3/3.0.2/launch4j-3.0.2-linux.tgz" dest="windows" usetimestamp="true" skipexisting="true" verbose="true" />

    <exec executable="tar" dir="windows/launcher">
      <arg value="-xf"/>
      <arg value="../launch4j-3.0.2-linux.tgz"/>
    </exec>
  </target>

  <target name="windows-build"
	  depends="revision-check, windows-checkos, subprojects-build"
	  description="Build windows version">
    <mkdir dir="windows/work" />

    <!-- assemble the pde -->
    <mkdir dir="windows/work/lib" />
    <copy todir="windows/work/lib" flatten="true">
      <fileset refid="runtime.jars" />
    </copy>

    <copy todir="windows/work">
      <fileset dir="shared" includes="lib/**" />
      <fileset file="shared/revisions.txt" />
    </copy>

    <fixcrlf file="windows/work/revisions.txt" eol="dos"/>
    <fixcrlf file="windows/work/lib/formatter.conf" eol="dos"/>

    <copy todir="windows/work">
      <fileset dir="windows/dist" includes="*.dll" />
    </copy>

    <copy todir="windows/work">
      <fileset dir="windows/dist" includes="drivers/**" />
    </copy>

    <!-- Unzip AVR tools -->
    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/avr-toolchain-win32-3.4.5.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/avr-toolchain-win32-3.4.5.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/avr" />
    </antcall>

    <antcall target="unzip">
      <param name="archive_file" value="./libastylej-2.05.zip" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/libastylej-2.05.zip" />
      <param name="final_folder" value="${staging_folder}/libastylej" />
      <param name="dest_folder" value="${staging_folder}" />
    </antcall>
    <copy file="windows/libastylej/AStylej.dll" todir="windows/work/lib" />
    <copy file="windows/msvcp100.dll" todir="windows/work" />
    <copy file="windows/msvcr100.dll" todir="windows/work" />

    <!-- Copy bossac.exe tool -->
    <copy todir="windows/work/hardware/tools">
      <fileset file="windows/bossac.exe" />
      <fileset file="windows/listComPorts.exe" />
    </copy>
    <chmod perm="755">
      <fileset file="windows/work/hardware/tools/bossac.exe" />
      <fileset file="windows/work/hardware/tools/listComPorts.exe" />
    </chmod>

    <antcall target="assemble">
      <param name="target.path" value="windows/work" />
    </antcall>

    <antcall target="download-${launch4j-download-unpack-target-name}" />

    <property name="launch4j.dir" value="windows/launcher/launch4j/" />
    <taskdef name="launch4j"
	     classname="net.sf.launch4j.ant.Launch4jTask"
	     classpath="${launch4j.dir}/launch4j.jar; ${launch4j.dir}/lib/xstream.jar" />

    <copy todir="windows/work">
      <fileset dir="windows/launcher"
	       includes="about.bmp, application.ico, config.xml, config_debug.xml, arduino.l4j.ini"/>
    </copy>
    <launch4j configFile="windows/work/config.xml" />
    <launch4j configFile="windows/work/config_debug.xml" />
    <delete dir="windows/work" includes="about.bmp, application.ico, config.xml, config_debug.xml" />
    <copy file="windows/work/arduino.l4j.ini" tofile="windows/work/arduino_debug.l4j.ini" />

    <!-- cygwin requires html, dll, and exe to have the +x flag -->
    <chmod perm="755">
      <fileset dir="windows/work" includes="**/*.html, **/*.dll, **/*.exe" />
    </chmod>

    <!-- Unzip ARM toolchain -->
    <antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/gcc-arm-none-eabi-4.8.3-2014q1-windows.tar.gz" />
      <param name="archive_url" value="http://arduino.cc/download.php?f=/gcc-arm-none-eabi-4.8.3-2014q1-windows.tar.gz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/gcc-arm-none-eabi-4.8.3-2014q1" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/" />
    </antcall>

    <delete includeEmptyDirs="true" quiet="true">
      <fileset dir="windows/work/hardware/tools/avr/doc" />
    </delete>
	
  	<antcall target="untar">
      <param name="archive_file" value="${staging_folder}/dist/win32-xtensa-lx106-elf.tgz" />
      <param name="archive_url" value="http://download.igrr.me/win32-xtensa-lx106-elf.tgz" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/xtensa-lx106-elf" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>
	

    <antcall target="unzip">
      <param name="archive_file" value="${staging_folder}/esptool-0.4.2-win32.zip" />
      <param name="archive_url" value="https://github.com/igrr/esptool-ck/releases/download/0.4.2/esptool-0.4.2-win32.zip" />
      <param name="final_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-win32" />
      <param name="dest_folder" value="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/" />
    </antcall>
    <move file="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-win32/esptool.exe" tofile="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool.exe" />
    <delete dir="${staging_folder}/work/${staging_hardware_folder}/tools/esp8266/esptool-0.4.2-win32/" />
 
  </target>

  <target name="windows-run" depends="windows-build"
	  description="Run windows version">
    <exec executable="windows/work/arduino.exe"
	  dir="windows/work" spawn="true"/>
  </target>

  <target name="windows-dist" depends="windows-build" description="Create .zip files of windows version">

    <loadproperties srcfile="${WINDOWS_BUNDLED_JVM}/../release" prefix="windows"/>

    <fail message="It looks like ${WINDOWS_BUNDLED_JVM} does not contain a Windows JVM">
      <condition>
        <not>
          <equals arg1="${windows.OS_NAME}" arg2="&quot;Windows&quot;"/>
        </not>
      </condition>
    </fail>

    <copy todir="${staging_folder}/work/java" includeemptydirs="true" preservelastmodified="true" overwrite="true" failonerror="true">
      <fileset dir="${WINDOWS_BUNDLED_JVM}" includes="*/**"/>
    </copy>

    <zip destfile="windows/arduino-${version}-${platform}.zip" level="9">
      <zipfileset dir="windows/work"
		  prefix="arduino-${version}" />
    </zip>

    <echo>
      =======================================================
      Arduino for Windows was built. Grab the archive from

      windows/arduino-${version}-${platform}.zip
      =======================================================
    </echo>
  </target>


  <!-- - - - - - - - -->
  <!-- Source        -->
  <!-- - - - - - - - -->

   <target name="source-dist" depends="revision-check"
	  description="Build .tar.gz of source code">
    <input message="Enter version number:"
	   addproperty="version"
	   defaultvalue="${revision}" />

    <tar compression="gzip" destfile="arduino-${version}-src.tar.gz">
      <tarfileset dir="../"
		  prefix="arduino-${version}"
		  excludes="**/*.tgz,
			     **/*.bz2,
			     **/build/macosx/,
			     **/build/windows/,
			     **/work/,
			     **/.git/,
			     **/*.class"
		  />
    </tar>

    <echo>
      =======================================================
      Arduino source distribution was built. Grab the archive from

      arduino-${version}-src.tar.gz
      =======================================================
    </echo>
  </target>


  <!-- - - - - - - - -->
  <!-- Run It!       -->
  <!-- - - - - - - - -->

  <target name="clean" description="Perform a spring cleaning"
	  depends="linux-clean, windows-clean, macosx-clean, subprojects-clean">
  </target>

</project>
